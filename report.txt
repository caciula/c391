CMPUT 391 Project Report

//Introduction

We developed our project with a standard jsp/Servlet architecture introduced in the labs. In general, our application follows an architecture where we have a Java Servlet backing each screen in the system. For example, the View Image screen has both a ViewImage.jsp file (containing the html code to display the screen’s data) and a ViewImage.java Servlet. The Servlet handles any logic and actions relating to the screen. For example, the GET command in the Servlet typically ensures that the user has permission to access the screen before continuing. The POST command for Servlet handles any actions that the user performs on the screen. We used this approach consistently throughout the application and found that it worked quite well to develop our project. 

While each screen has its own Servlet, we tried to minimize duplicated code by creating some reusable elements. For example, a common operation in the system is determining if an image is viewable for a particular user. We created a utility method to perform this logic that is reused on many screens. Another example of code reuse is a common header file that is imported into each screen with the jsp:include directive. We also made a common error screen that handles all errors in the application. The error screen was developed so that it could display many different error messages using the same screen.  

// User Management module

The user management module consists of three screens: a screen where users can actually login to the website, a screen where users can sign up for an account to the website, and a screen where users can modify their personal information. This module is related to the security module in the sense that this provides a way for users to login to the website, and remained logged in for the entirety of their session.

If a user wishes to login, they would have to supply a valid username/password combination. The servlet checks the validity by querying the database with a prepared statement (select count(*) from users where user_name = ? and password = ?). If a 1 is returned, the combination exists in the database and the user has successfully logged in. What this means is that their username is now attached to the session as an attribute. Furthermore, the way the other modules verify that a user is indeed logged in is they check to see if the username attribute is not null. Finally, if a user wishes to log out, the attribute is cleared from the session. If an invalid combination has been entered, however, the user remains not logged in.

If a user wishes to create a new account, they are presented with a screen where they can enter their personal information. Once the user submits the data, it is verified before added to the database. The servlet first checks to see if the username is already in use (select count(*) from users where user_name = ?). If a 0 is returned, the servlet then checks if the email is already in use (select count(*) from persons where email = ?). If a 0 is returned, then all checks have been passed and the user's account is added to the database with two queries, (insert into users values(?, ?, ?)) and (insert into persons values(?, ?, ?, ?, ?, ?)).

Once a user is logged in, they may choose to edit their profile information. Once the account management screen loads, they are first presented with their current information, gathered with (select * from persons where user_name = ?) and (select password from users where user_name = ?). Every field, except the username, can be changed. Once the user is happy with their changes and submits the data, the servlet has to verify that the new email isn't already in use by a different user (select count(*) from persons where email = ? and user_name != ?). If a 0 is returned, the servlet then proceeds to update the database with (update persons set first_name = ?, last_name = ?, address = ?, email = ?, phone = ? where user_name = ?) and (update users set password = ? where user_name = ?).

// Security module

The security module consists of two screens: a screen where users can create or delete groups, and a screen where users can add or remove other users from groups they own.

If a user wishes to create or delete a group, they only need to type in a group name and click on the appropriate button. If the create button is clicked, the servlet first checks to see if the user hasn't already created a group with the same name (select count(*) from groups where user_name = ? and group_name = ?). If a 0 is returned, all checks have been passed and now it's time to actually create the group. Since group id is the primary key of the groups, we need a way to find a unique id. The way this has been implemented is that the highest id is found (select max(group_id) from groups), and then it is incremented by 1. Finally, the group is created (insert into groups values (?, ?, ?, ?)). If the user wishes to delete a group, however, the servlet checks to see if the user is indeed the owner of the group (select count(*) from groups where user_name = ? and group_name = ?). If a 1 is returned, all checks have been passed and now it's time to actually delete the group. (select group_id from groups where user_name = ? and group_name = ?) is used in order to find the group id of the group being deleted. But before that can happen, all users belonging to that group have to be removed first (delete from group_lists where group_id = ?). Once all users have been removed, then the group itself is deleted (delete from groups where group_id = ?).

Once a user loads the user management screen in order to add or remove users from groups they own, a dropdown list is populated with all such groups (select group_id, group_name from groups where user_name = ?). If the user chooses to add a friend to a group, the servlet first checks if the friend is indeed a valid user, and not the same person as the group owner (select count(*) from users where user_name = ? and user_name != ?). If a 1 is returned, the servlet then checks to see if the friend isn't already in the group (select count(*) from group_lists where group_id = ? and friend_id = ?). If a 0 is returned, then all checks have passed. The user is added to the group by (insert into group_lists values(?, ?, ?, ?)). If the user wishes to delete a friend from a group, the servlet first checks if the friend belongs to the group (select count(*) from group_lists where group_id = ? and friend_id = ?). If a 1 is returned, then the friend is removed from the group by (delete from group_lists where group_id = ? and friend_id = ?).

// Uploading module

The upload module consists of two screens: a screen for uploading a single image, and a screen for uploading multiple images at once. The user accesses these screens through their profile pages (from the display module). While a user will only be able to access these screens directly through the application when they are logged in, there is the possibility that a user that is not logged in could try to access the screen by directly typing in the URL. To address this problem, an additional check was added in the GET command for the screens to ensure that the current user is logged into the system. If the current user is not logged in, they are directed to the error screen.

The upload screens display input fields for the image information. For a more intuitive user-interface, the mandatory fields are marked with a red asterix, so the user knows which fields they must enter. We also used a standard date-picker for the Date field, from the jQuery javascript library. The "Access" drop down contains a list of groups. Obtaining the list of groups to display in this drop down was a little complicated because it contains groups from several sources (for example, groups that the user is a part of and groups that the user has created themselves). Several SQL queries are used to obtain this list of groups. To begin, the system obtains all groups in system (SELECT * FROM groups). Then the system obtains the groups that the user is a member of (SELECT group_id FROM group_lists WHERE friend_id=?), and the groups that the user created (SELECT group_id, group_name FROM groups WHERE user_name=?). An iteration is performed over all the groups, and a group is only added to the result if it is present in either the list of groups the user is a member of, or the list of groups the user created. In addition, the Public and Private groups are explicitly added to the final result of groups to display in the drop down. 

The actual process of uploading the image was largely derived from the provided sample code. However, the SQL statements were changed to use PreparedStatements (instead of a String query) to avoid the possibility of SQL injections in the user's input. To insert an image into the database, an id for the photo is obtained from the pic_id sequence (SELECT pic_id_sequence.nextval FROM dual). The image record is then created based on the image's information, but with empty blobs temporarily representing the images (INSERT INTO images VALUES (?,?,?,?,?,?,?,empty_blob(),empty_blob())). The actual photo and thumbnail is then added by updating the photo record (SELECT * FROM images WHERE photo_id = " + photoId + " FOR UPDATE), and writing the image using an image output steam. Both thumbnail and full-sized images are saved to the database so it is efficient to display a screen with many thumbnail images. 

The screen to upload a single image was implemented with a standard file-picker widget from the sample code. Uploading multiple images at once was more complicated because we needed to use an applet to allow the user to select an entire directory to upload. The JUpload applet from the sample code was used to provide this functionality. The applet worked well for uploading images because it had a lot of built-in flexibility. A “postURL” parameter for the applet allowed us to specify what URL to post the image to, while an “afterUploadURL” parameter specifies where to redirect the user after all the images are uploaded successfully. A “formdata” parameter made it possible to submit form data along with an image upload; this allowed for the image details to be submitted in the same request. 

// Display module

The display module contains three screens: a “My Profile” screen, a “View Image” screen, and an “Edit Image” screen. When a user is logged into the system, the My Profile screen is the screen from which they can perform many actions – such as managing their groups, uploading new images, or viewing/editing images that have already been uploaded. Information about the user’s profile (such as name, phone number, or address) is displayed at the top of the screen. This information is obtained with a simple SQL query based on the user’s username (SELECT * FROM persons WHERE user_name=?). The next section in the screen displays user’s groups. The groups that the user has created are obtained with the following SQL command: SELECT group_id, group_name FROM groups WHERE user_name=?. For each group that the user has created, another query is performed to obtain all of the members of those groups (SELECT * FROM group_lists WHERE group_id=?). These results are then displayed in a table on the screen, showing all of the groups that the user has created, along with the members of each group. This section of the screen also displays links to navigate to the group management module, where the user can create or remove groups, and add or delete members from groups.

Below the group management section, there is another section on the screen that displays the images that the user has uploaded. The user’s images are obtained using the following SQL command: SELECT * FROM images WHERE owner_name=? ORDER BY timing DESC NULLS LAST. The images are displayed on the screen as a sequence of thumbnails. They are sorted so that the more recent images are displayed first. There is no need to filter these images based on their security access because a user is always able to view all of the images that they have uploaded themselves.

Clicking on a thumbnail image navigates to the View Image screen for that image. Since the View Image screen can be accessed by different users, there is a check in the GET command that ensure the user is allowed to see the image in context. The image is obtained by the image id from the URL parameters (SELECT * FROM images WHERE photo_id=?). Any user is allowed to view the image if it has a “Public” security access. If the image has a “Private” security access, then the user can only view the image if they are the owner of the image. If the security access of an image is limited to a specific group, then the user is only allowed to view the image if they are part of the specified group. Obtaining the members of a group has already been described in the previous section. 

If the user does not have permission to view the image, then they are redirected to the error screen. Otherwise the user can continue and view the image. If the owner of the image is viewing the image, then links are displayed to navigate to the Edit Image screen. There is also a link to remove the image. Removing the image will delete the image from the system by first removing all of the image’s entries in the image_views table (DELETE FROM image_views WHERE photo_id=?), and then by removing the image itself (DELETE FROM images WHERE photo_id=?). 

The third screen in the display module is the Edit Image screen. There is a check in the GET command to ensure that the current user is the owner of the image. The same SQL queries are used to obtain the image as described in the previous section on the View Image screen. The fields on this screen are similar to the Upload Image screens, except that they are prepopulated with the existing image information. One technique that we used to reduce the chance for input errors is to limit the maximum length of input fields based on the size of the column in the database.  For example, if the Subject field only has 128 characters in the database, then we would limit the input textfield to 128 characters on the screen. This eliminated a possible SQL exception if the user could enter more than 128 characters. 

Updating the image’s information based on the user’s input is a simple operation (UPDATE images SET subject=?, place=?, timing=?, description=?, permitted=? WHERE photo_id=?).  The only tricky part is combining the Date and the Time fields into a single SQL Timestamp object. This was accomplished by using a SimpleDateFormatter to combine the String inputs into a Date object. The Date was then converted into a SQL Timestamp to be saved in the database. Once the image information has been updated, the user is redirected to the View Image screen to view the updated image. 

A final component of the display module is displaying the top five images on the Home screen. A new database image_views table was created to store the unique views of an image:

CREATE TABLE image_views (
    photo_id   int,
    user_name  varchar(24),
    FOREIGN KEY(photo_id) REFERENCES images,
    FOREIGN KEY(user_name) REFERENCES users,
    UNIQUE (photo_id, user_name)
);

Whenever a user views an image on the View Image screen, a check is performed to see if this user has already viewed the image (SELECT * FROM image_views WHERE user_name=? AND photo_id=?). If the current user has not viewed the image before, a new record is added to the image_views table (INSERT into image_views values(?,?)). When a user navigates to the Home screen, the "Top Images" section displays the top five images with the most unique viewers. The top images are obtained with a SQL query on the image_views table (select count(user_name) as count, photo_id from image_views group by photo_id order by count DESC). Each image is checked to ensure that the current user is allowed to view the image based on the image's security setting. If there are multiple images that are tied then all the tied images are displayed. 
































